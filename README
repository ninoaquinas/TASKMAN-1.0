TASKMAN 1.0

Objective : - To create a program that is heavily implemented using design pattern
			- To stand a chance working with awesome people in Quora
			- Last but not least, to create a useful and cool program

Installation: - Python and wxPython (must install wxPython)

How to use : - Simply extract the zip file, Install the files above and run clientMain.py

Description :
- TASKMAN is a program that is created to manage user task easily
- In order to get started, just key in username and password. The program will create an account automatically if the username is not yet on the list
- In TASKMAN, user is able to specify the priority, category and deadline for each task created
- In addition, user also needs to specify "milestone(s)" for every task he/she created
- User is able to specify weight and details for every task milestone
- User will be able to keep track of the task progress based on completed milestones
- Task is considered complete, if and only if, the user has completed all milestones for the respective task
- User is able to see the report of the task once it is completed

Features :
- Able to create a more concrete task, with its milestone concept
- Able to customize priority and category of the task
- Able to copy, remove, edit or sort the task with ease
- Able to track down the progress for each and every task
- Able to keep all information about completed task from user
- Able to support multiple users in one machine, using simple username password authentication
- Able to highlight task with approaching deadline
- Able to generate report of a completed task


Files Description
- clientMain.py, File to run TASKMAN 1.0
- DataFactory.py, class to handle save/load data to/from files (Implement strategy pattern).
- DataManager.py, class to handle save/load request from program (behaves like proxy for DataFactory.py).
- LoginManager.py, class to authenticate valid user and password to enter the program.
- Validator.py, class to validate a task to fulfilled given rules (Implement strategy pattern)
- Facade.py, class to provide a simplified interface for the program (Implement Facade pattern and singleton pattern)
- WindowFactory.py, factory class to provide necessary window (Implement abstract factory method and factory method pattern).
- WidgetFactory,py, factory class to provide necessary widget for window (Implement abstract factory method pattern and factory method pattern)
- MediatorFactory.py, factory class to provide a Mediator, class that let every widget in window to communicate (Implement Factory Method Pattern, Mediator pattern and Chain of responsibility pattern).
- Define.py, Configuration files and predefined constant.
- Template.py, class that contain common function that being use throughout the program (implement Template Pattern).
